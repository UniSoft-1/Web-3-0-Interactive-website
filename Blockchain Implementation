// Blockchain Implementation
pragma solidity ^0.8.0;

contract TradingContract {
    struct Trade {
        address trader;
        string asset;
        uint256 amount;
        uint256 price;
        uint256 timestamp;
    }
    
    Trade[] public trades;
    mapping(address => uint256) public balances;
    
    event TradeExecuted(address indexed trader, string asset, uint256 amount, uint256 price, uint256 timestamp);

    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        balances[msg.sender] += msg.value;
    }
    
    function withdraw(uint256 _amount) public {
        require(balances[msg.sender] >= _amount, "Insufficient funds");
        payable(msg.sender).transfer(_amount);
        balances[msg.sender] -= _amount;
    }
    
    function executeTrade(string memory _asset, uint256 _amount, uint256 _price) public {
        require(balances[msg.sender] >= _amount * _price, "Insufficient balance for trade");
        balances[msg.sender] -= _amount * _price;
        trades.push(Trade(msg.sender, _asset, _amount, _price, block.timestamp));
        emit TradeExecuted(msg.sender, _asset, _amount, _price, block.timestamp);
    }
    
    function getTrades() public view returns (Trade[] memory) {
        return trades;
    }
}

// Hardhat Configuration (hardhat.config.js)
require("@nomicfoundation/hardhat-toolbox");
require("dotenv").config();

module.exports = {
  solidity: "0.8.0",
  networks: {
    hardhat: {},
    rinkeby: {
      url: process.env.ALCHEMY_API_URL,
      accounts: [process.env.PRIVATE_KEY]
    }
  }
};

// Deployment Script (scripts/deploy.js)
const hre = require("hardhat");

async function main() {
  const TradingContract = await hre.ethers.getContractFactory("TradingContract");
  const tradingContract = await TradingContract.deploy();
  await tradingContract.deployed();
  console.log("TradingContract deployed to:", tradingContract.address);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
